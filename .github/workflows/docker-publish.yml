name: Build and publish Docker image

on:
  push:
    branches: 
      - release
    tags:
      - 'v*.*.*'  # Triggers on semantic version tags like v0.5.0, v1.0.0, etc.
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  # Convert repository name to lowercase for GitHub Container Registry
  IMAGE_NAME: ${{ github.repository_owner }}/transit-tv

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_tag: ${{ steps.version.outputs.is_tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      image_digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract version info
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # Extract version from tag (e.g., v0.5.0 -> 0.5.0)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_tag=true" >> $GITHUB_OUTPUT
            
            # Check if it's a pre-release (contains alpha, beta, rc, dev)
            if [[ $VERSION =~ (alpha|beta|rc|dev) ]]; then
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
            fi
          else
            # Release branch build - use commit SHA for version
            SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
            echo "version=latest-$SHORT_SHA" >> $GITHUB_OUTPUT
            echo "is_tag=false" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Extract metadata and generate tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For release branch, tag as latest and with commit SHA
            type=raw,value=latest,enable=${{ steps.version.outputs.is_tag == 'false' }}
            type=raw,value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.is_tag == 'false' }}
            
            # For version tags, tag with version number
            type=raw,value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.is_tag == 'true' }}
            
            # For stable version tags, also tag as latest
            type=raw,value=latest,enable=${{ steps.version.outputs.is_tag == 'true' && steps.version.outputs.is_prerelease == 'false' }}
            
            # For pre-releases, tag as pre-release
            type=raw,value=pre-release,enable=${{ steps.version.outputs.is_prerelease == 'true' }}
          labels: |
            org.opencontainers.image.title=Transit-TV
            org.opencontainers.image.description=Use the Transit API to show next departure of a location in big for a TV context
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.created=${{ github.run_id }}
            org.opencontainers.image.revision=${{ github.sha }}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Disable provenance and SBOM to prevent manifest issues
          provenance: false
          sbom: false
          
      - name: Verify pushed images
        run: |
          echo "Verifying pushed images..."
          echo "Image digest: ${{ steps.build.outputs.digest }}"
          echo "Tags:"
          echo '${{ steps.meta.outputs.tags }}' | while read -r tag; do
            if [[ -n "$tag" ]]; then
              echo "Checking: $tag"
              # Use docker manifest inspect to verify each tag exists
              if docker manifest inspect "$tag" > /dev/null 2>&1; then
                echo "✅ $tag exists and is accessible"
              else
                echo "❌ $tag verification failed"
                exit 1
              fi
            fi
          done
          
      - name: Generate summary
        run: |
          echo "## Docker Image Published Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add version info
          if [[ "${{ steps.version.outputs.is_tag }}" == "false" ]]; then
            echo "**Release Type:** Latest Release (from release branch)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.version.outputs.is_prerelease }}" == "true" ]]; then
            echo "**Release Type:** Pre-release (v${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Release Type:** Stable Release (v${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.meta.outputs.tags }}' | sed 's/^/- `/' | sed 's/$/`/' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Provide appropriate pull commands based on release type
          echo "**Pull Commands:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.version.outputs.is_tag }}" == "false" ]]; then
            echo "# Latest from release branch" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.version.outputs.is_prerelease }}" == "true" ]]; then
            echo "# Pre-release version" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Latest pre-release" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pre-release" >> $GITHUB_STEP_SUMMARY
          else
            echo "# Latest stable release" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Specific version" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Built with semantic versioning strategy for Transit-TV*" >> $GITHUB_STEP_SUMMARY
          echo "*Generated using agentic coding assistance*" >> $GITHUB_STEP_SUMMARY

  cleanup-old-images:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: success()
    
    permissions:
      packages: write
      
    steps:
      - name: Delete old pre-release images
        uses: actions/delete-package-versions@v5
        with:
          package-name: transit-tv  # Match the lowercase image name
          package-type: container
          min-versions-to-keep: 6
          delete-only-untagged-versions: false
        continue-on-error: true
